
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

public class Day18 {
	
	static String test1 = "2 * 3 + (4 * 5)";
	static List<String> input = Arrays.asList("(9 + 4 * 9 * 4) + 3 + 7 * 8",
"4 * 4 * (8 + 4 * 2 * 3 + (6 + 6 * 7 + 6) + (7 + 4 * 9 * 7 + 2))",
"6 + ((8 + 2) * (2 * 6 * 9 * 6 * 5)) + 5",
"9 * 6 + ((7 * 6 * 8 * 2 + 9 * 5) + (3 + 2 * 8 * 5 + 4) * 8 * 6 + 8 + 6) + 8 + (7 * (9 + 7 + 3 * 5 + 7 + 8) + (6 * 7 + 8 + 9 + 7) * 5 * (7 + 4 + 8 * 3) * (5 * 3 * 4 + 4)) + (9 * 9 + (2 + 8 * 8) * 4 + 4 * 5)",
"2 * (7 + 4 + 7 * (8 + 9) + 5 * 3) * 4 + (9 * 4 * 5)",
"(9 * 9 + 9 * 7 + (8 + 4 * 6) + (9 + 3 + 9 + 7 * 5 + 2)) * 3",
"9 * 7 + 4 + ((4 * 9) * 4 * (7 + 7 * 8 * 3) * (6 * 7 * 7 * 4 + 9 * 8)) * 4 * 8",
"4 + 9 * 2 + (2 + (6 * 5 * 6) + 3 * 4 + 6)",
"6 + 7 + (6 * (3 + 8 * 6 * 8) * (2 + 6 * 5 + 6 + 5) * (6 + 3 + 3 + 3 + 8 * 6)) * (9 * 2 * (8 + 6 * 3 + 8 * 9)) + 5",
"(7 * 8 + 3 * 2 * 8 * (7 * 6 + 3 * 4)) + (5 + 3 + 3 + 3 + (6 + 5 * 9 + 7 * 7 + 5)) + (7 * 9 * (5 * 9) + 3 + (3 * 3 * 4 * 9 * 3) + 5) + 6",
"6 * 4 * 4 + (6 * 7 + 5 * 6 * 5 * 5) + 6",
"(5 * 4 + (4 * 5 + 8 * 5 * 9 + 4) + 5 * 6) + 7 + 9 * 7 * 9 + 5",
"3 * 8 + 8 * (8 * 7 * 8 + (5 * 7 + 9)) * 5",
"4 * ((5 + 7 * 3 + 5) * 8 + 2 + (9 * 4)) + (2 * 2 * 7 * 5 * 2 * 4) * 4 * 5 * 6",
"3 + (7 * (8 + 4 * 4) * 2 * 3 * 6 * (7 * 8 + 8))",
"6 * 9 * 3 * (7 * 5 * 9 * (5 + 7 + 2 * 4 + 4 + 2))",
"4 + 9 + 9 + ((5 + 4 * 3 + 9 * 9 * 3) * (9 + 9)) * ((9 + 6) + 9 * (2 * 8 * 6) * (8 + 3 + 2 + 4 * 6 + 8)) + 4",
"((6 * 7) * 9 + 6 * 3 * 9) + 5 + (6 + (7 * 9 * 4)) * 6 * 8 + 6",
"(3 * 4 + 3 + 3 * (2 * 7 + 4 * 9)) + 5",
"(5 + (7 + 6) * (8 + 4 + 5 * 7 * 8)) + 3",
"(5 + (4 + 4 * 5 + 7 * 2)) * 2 + (9 + 5 * (9 * 7 + 3))",
"(9 * 6) + 9 + (6 * 9 + 2 * 3 + (2 * 3 + 6 + 5)) + 7",
"9 * 5 * 7 * (3 + 6 + 9 + 5) * 6 + (7 + (8 * 7))",
"2 * 9 * 7 + (6 * 5) * (4 + (2 + 8 + 9 + 9 * 6) * 4 * 6 * 5 + 4) + 4",
"5 + 9 + (5 * 9 + 6 + 3 + 8 * 9)",
"(2 + 6 + 3 + 2 * 6) + 3 * (3 * 2) + 2 * 6 + (2 * 8)",
"4 + ((4 * 9 + 4 + 4) + 2 + (3 + 2 + 6 + 2) + 8 + 8)",
"5 * 2 + ((3 + 2 * 7 + 3 + 6) + 7 * (7 + 9 + 9))",
"((9 + 6) * 7 * (4 + 2 * 9 * 9 * 5) + (5 + 5 + 8)) * 7 + 8 * 9",
"(3 * 6) + 3 + (6 + 9) + (7 * 4 + 8 * 8 + 2 * 4) + 9",
"(9 + 7 + 3 * 9 * 7) + ((9 * 7 * 6 + 8) * 4 * 6 * 8)",
"3 * ((8 + 9 + 8 * 3 + 2 * 8) * 8) * 4",
"5 * 3 + (7 + 4 + 2 + 4 + 7 + (2 * 5))",
"2 * 7 + 9 * 5 * (6 * (3 + 6 + 5 * 2 * 4) + (9 + 6 + 8 * 3 + 7)) * 2",
"6 * 8 * 9 * ((4 + 4 + 4 * 4 * 8) + (8 + 8 * 7 * 5 * 6) + 9 + 9 * 9 * 8)",
"4 * (8 * 8 * (2 + 9 * 3 * 3)) * 2 * (8 * 2 + (5 + 6))",
"5 + (2 * (6 + 4 + 5 * 3 * 3) + (9 + 7 * 4) * (5 + 6 * 5 + 9 + 6)) + (2 * (2 * 3 * 3 + 4) + 9 * 8 + 9) + 4 * 6 * (9 + 9 + 5 * (7 + 8 * 9 * 9 + 7) * 2)",
"3 * (3 + 2 * 9) * 5 + 7 + 5 + (3 + 5 + 2 * (2 * 4 * 5 + 7 * 7))",
"5 + 9 + 5 + 3 + (7 * 4 + 6 * 7) + 4",
"5 * (8 * 4 * 9 * 9 * 7 * 5) + 3 + 9",
"7 * (9 * 5 + (8 + 6 + 4)) + (7 * 7 + 8)",
"(8 * 7 * (5 * 2 + 8 + 9 * 9 + 5) + 8 + (6 * 3 * 5 + 6 + 2) * 4) * 2 + (9 * 3 * 5 * (7 * 7) + 5) * 4",
"((7 * 2 + 9) * 9 + (4 * 3 + 3) * 9 * 4) * 6 * (8 * 8 * (2 * 4 + 8 + 3 * 4 * 6) + 8)",
"3 + 8 * 7 + (4 + 8) + (5 + 2 + 8 + 9 + (5 * 7) + 9)",
"5 + 6 + 3 * 5 + 2 * 2",
"(4 * (2 + 3 * 2) * (7 * 2 * 7) + 4) + 4 * 7 + (9 * 3 * 4 * 6 + 9 + (2 + 5 + 2 * 7 + 7 * 3))",
"8 * 9 * 2 * 9 * (2 + 5) + 6",
"3 * 2",
"3 * 4 * ((4 + 5) + 2 * 9 * 5 * 3 * 7) + (6 + 4 + 2 + 6 * 8) + 3 * 9",
"2 * 4 + 8 + 6 * (6 * 6 + 2 * (2 + 8 * 7)) + 3",
"((4 + 2) * 4) * 4 * 4 * 5",
"((3 + 7) + 8 * (6 * 7 * 8)) * 3 * 4 * 3",
"(6 + 2 + 9 + 7 * 6) * (4 * 9 * 7 + 6) * (2 + 7 * 3) * 2 + 8",
"8 * 6 * 8 + (8 + 2 * (7 + 5 + 8 * 2 * 9) * (4 + 5 + 5 * 8) + 3) * 7",
"(4 * (2 * 9 * 7 + 5 * 5 * 7) + 7 + 3) + 6 + 6 * 3",
"7 * ((3 * 5 * 6) * (3 + 8 + 4) * (8 + 7 + 8 + 4 + 2 * 5)) * 8 * 6",
"9 * (4 * 4 + (8 + 6 + 9 + 9 * 3 + 2)) * 7 + 8",
"4 * 5 * (6 + (5 + 2 * 3 + 4)) + 5",
"(8 * 8 * 6 + (2 + 9 + 9 * 7 + 5) * 2) * (8 + 7) + (2 + 9 * 9 + 5 * (8 * 5 + 4 * 9)) * 4 * ((6 * 8) + 3 + 8 * 4 + (6 * 9 + 2) + (5 + 6 * 6))",
"(2 * (4 * 3 * 7) * 6 + 9 * 6) * 9",
"(3 + 5 + 4) + 4 * 4 * (5 + (4 + 5) + (4 + 5) + 5 + (5 * 4 + 7 * 6 + 2 + 4)) * 5",
"6 * 3 + (7 + 3 + 8 * 9 + 6 * 4) * 8",
"(8 + 3 + 8 * 3 + (7 * 6 + 8 + 7) * (6 * 2 + 9 * 9 * 7 + 8)) * 3",
"(3 * 3 * 4 + 2 + 7 * 8) * 8 * 2 + 4 * 6",
"7 * (7 * (6 * 6 * 3 * 4 * 9 * 2) + 6 + 5) * 9 + 2",
"(7 + 3 * 8 * (4 + 6 * 6 + 8 * 4)) * (9 * 5 + 2 * 3) * 5 + 5 * 6 * 7",
"4 + (2 + 9) * (5 + 3 + 8 + (3 + 7 + 3 + 7 * 9 + 3)) + 8 + (4 + 3 * (9 * 3)) * 9",
"((6 * 9 + 7 + 5 * 3) + 9 * 9 + 2 * 7) * 3 + 4 * 9",
"7 + (2 + 9 * 7 * 7 + (5 + 4 * 4 + 5 * 6 + 5)) + 4 + 5",
"9 * 5 * 2",
"(9 * (4 + 6 + 7 + 8 + 7) * (9 + 7 * 5 + 5 * 6) * 5 + (2 + 5 * 8 * 8 * 5)) * 2 + 9 * 8 + 7",
"(8 + 7 + 7 * 4 * 4 * (5 + 5 + 3)) + 9 + (9 * 7 + 5 + 3 * 3)",
"2 + ((8 * 2 + 8) * 8) * 8 + (5 + 2 + 4 * (3 * 9 * 7 * 7 + 5 + 7) + 9 + 7) * 5 + 8",
"(2 + 2 + 6) * ((3 * 2) * (9 + 5 + 3 + 3) + 9 * 8 * 7 + (9 * 7 + 3 * 7 * 5)) * 5 * 7 * 4",
"(7 + 3) + (5 + 3 * 9 + 6 + 8) * (6 * 8 + 7 + 2 * 9 + 3)",
"(7 + 6) + 5 * (9 * 5 * 9 + 3 * 8 + 6)",
"3 * 2 + 4",
"5 * 4 + 8 * 7 + 6",
"5 + 8 + (9 * 9)",
"9 * 4",
"9 + 9 * (6 * 4 + 2) * 6 + 7 + 4",
"(5 + 3 * 9) + 7 + 9 + ((5 + 5 * 7 + 9 * 2 * 3) + (8 + 4 * 7 + 7 + 3) * 7) + 5",
"5 * (7 * (4 * 3 + 8 + 8 + 5))",
"8 + 9 + ((8 * 8) + 4 + 3 * 3) + ((9 + 4) * (6 * 7 + 8 + 3 + 5) + (5 + 2 * 3) * 9 * 9) * 6",
"(3 + 4 * 2 + 7 + (4 * 4 * 5 * 4 * 7)) + (5 + 7) * 6",
"5 + 8 + 2 + 4 * (7 + 3) + (7 + (6 * 9 + 8 + 8) + (9 * 9 * 9 * 4 * 2) + 8)",
"3 + 8 * 4 + 3 * (8 * 4 * 6 + 4)",
"2 + 9 + 5 + 2",
"4 + 7 + 4 + (3 + 3 * 4 + 5) * 6 * (3 + 2 * 3)",
"(7 + (7 + 7 + 3 * 9 * 4 + 2) + 4) * 9 + 6",
"4 * 9 * 6 + (5 * 5 + 5 * 6 + 3 + (5 * 2 + 6 * 4 * 9)) * 4 + (2 + 4 * 4 * (9 + 9 * 5) * 5)",
"(7 * 5) * 9",
"(4 + 5 + 7) + (4 * 3 * 4 * 9) + (4 * 7 * 4) * 4 + 2",
"2 + 8 + 8 * 5 * ((5 * 4 + 9 * 4 + 9 + 5) * (7 + 5 * 6 + 5 * 8) + 4 * 6 + 6 + 2)",
"(4 + (2 * 3 + 8 * 3)) * 2",
"4 * 5 + 4 * ((8 + 6 + 4) + 3 * (5 + 3 + 9 * 2) + 6) + 6",
"2 * 6 * (7 + 4 + 6 * 7 * (2 * 9 * 9 * 4)) + 4",
"8 * (2 + (8 * 2 + 9) + (7 + 3) * 4 * 8) * (7 * (3 * 5 + 2 + 3)) * (3 * 4 + 5 * 6)",
"(3 + (6 * 4 + 8) * 5) * 9 + 4 * (4 * 7) * 6 * 4",
"(4 * (9 + 3) + 5 * 5 + 8 * 5) * (2 + 5)",
"(6 * (9 * 3 * 9 + 5 * 4) + 7 * 5) + 5 * (4 + 6 + 8) * 7 + 7 + 5",
"6 * (4 * 8 + 4) * (8 * 5)",
"(7 + 8 * 7) + 9 + 5 * 5 + 2",
"(3 * 7) + 7 + (9 + 6 * 5 + (4 + 4 * 7 + 4 * 4) * 9 * 2)",
"8 * (9 * 9 + 4) * 8 + 8 + 2 + 2",
"5 + 3 * 4 + 3 * 7 * (8 + (3 * 4 * 3))",
"2 + (8 + 2 + 5 * (4 + 2 + 5 + 6 * 7 * 6) + 6) + (7 * 3 * 3 * 2 + 2) + 8 * 9",
"6 * (9 + 2 * 6 + 8 + 6 * 3) + 8 * 6 * (2 * 2) * 6",
"(8 + (8 * 6 + 3 + 8) + (3 * 4 + 3) + 7 + 5) + (3 + (4 * 6 + 7 * 7) + 6 + 5 + 6)",
"(9 + 8) + 7 * (8 + 9 + 3 + 3 + 3) * 3 + 2 + (9 + 4 + 2)",
"5 * (8 + 7 + (9 + 9 * 8) + 7) + 8 + 7",
"((9 + 4 + 3 * 7) + 6) * 5 + 4 * 9",
"(8 + (3 * 4 + 9 + 9)) + 5 * 4",
"8 * 9 + 4 * 3 * (4 + 2 + (9 * 3 * 9 * 3) + 3)",
"5 + 3 * 8 * (9 * 9 + 4 * 8 * (5 + 6 + 4)) + (4 * 6 + 7 + 9 * (3 * 8)) * 2",
"8 + 6 * (4 + (4 * 7 * 4 + 8) + (9 + 3 + 4 * 9)) + 3 * 7",
"(6 * 7 * 3) + 7 + 4 * 2 * (4 + 6 * 5)",
"3 * (9 * 4 * 9 + 3 + 6 + (4 + 4 * 8)) + 8 * 9",
"(6 * 3 + (7 + 7 * 5 * 8 * 5)) * 8",
"3 * (5 + (8 + 3 * 7 * 9 * 7) + 5 + 8 * 2 + (6 * 5 * 2)) * 6 + 4 * 5 * 2",
"2 + 8 + 9 * 8 + 9 + (5 + (6 + 5 + 2 * 2 * 4) + 8 + 7 + 6)",
"3 + (8 * 4 + 5 + 7) * 6",
"4 * (7 * (5 * 2 + 3) + 8 * 9 * 9 + 2) + 7 + 2 + 2 + 3",
"9 + (8 * (8 + 4 + 7 + 4) + (2 * 5 * 7 * 2 + 5)) + 4 + 5 * (4 + 4 * 4) + 9",
"5 * 8 * (5 * 7 * 7 + 8 * (5 * 3) * 9)",
"7 + 3 + 3 * (6 * 3 * 6 * 5 * 6) * 5",
"9 + (9 + 6 * (2 + 4 * 7 + 2 * 8 * 6) + 4 + 7) + 9 + 6",
"8 * 6 + 2 + 8 + 9 * 5",
"(3 * 7 + 5 + (2 + 9 + 7 + 9) + 5) * 5 + 2 * 5 + 9",
"(2 * 8 * 8 + 7 + 8) * (6 + 9 + 7) * (7 * (9 * 2 + 3 + 7) * 8 * (2 * 2 * 5) + 5 + 5) * 2 + 7",
"7 + (8 + 7 + 4)",
"5 * 6 + ((5 * 5 * 8 + 8 * 4 * 7) * 4) * (6 * 8 + 6 * 4 + 7)",
"3 * 4 + 6 + 8",
"5 + 4 + (7 * 3 * 7 * 5 * 6 * 6) * 9 + 5",
"(6 * 4) * 5 + (9 + (9 + 8) + 4 + (7 * 5 + 3)) * 2 + 2",
"((7 + 6 * 3) + 6) + 3 + 3 * 7 * 4",
"2 * (9 + 4 * (9 * 7 + 2) + 8) * 3 + 3 * (3 + 5 * (3 + 8) * 2)",
"6 * 6 * (2 + 7 * (6 * 8 * 6 * 6 + 7)) + ((7 * 9) * (8 * 3 * 4 * 6 * 5))",
"4 + (7 * 7 * 8 * 8 * 5 + 3) + (8 * 7 + 6 * 6 * 9 + 5) + 7",
"6 + 3 * 8 + (5 * (5 * 7 * 6 + 7 * 2) + 9 + 8 + 3 * (2 + 5))",
"7 + 4 + 9 + (7 + 3) * 7 * 4",
"2 * (5 * 7 * 2 + 4 * 5) * 2 * 3 + (7 + 6 + 4 * 3 * 9)",
"6 + 6 + (6 + 8 * 6) + 4",
"4 + (5 + 9) * 6 * 3 * 9",
"(4 * (7 + 6 + 4 + 2 + 6 + 3)) + 3 * 8 + 4",
"3 * 7 * 3 + 8",
"(7 + (2 * 9 * 9 + 6)) * 4 + 3 * 3 + 2 + 8",
"4 + (8 + 3 * 7 * 9) + 9 * 4 + 6",
"(4 + (8 * 6 + 6 * 5 + 7 + 5) * (8 * 3 + 3)) + 6 + 5",
"((5 * 9 * 2 + 8 * 9) * 3 + 7) + 7 * (8 * 4) * 3 * 6",
"3 + 7 * 5 + (4 + 8 * 6 * 9)",
"7 + 2 * (6 * 7 * (3 * 8 + 5) + 3 * 7 + 9) * (8 + 8)",
"3 + 5 + (8 * (7 + 8 + 6 + 3 * 7) * (8 * 7 + 8 + 7 + 3 * 2)) + 4 + 7",
"3 * (2 * (8 * 3) * 9 + 8 * 4) + 2 * 2 + 4",
"9 + 4 + ((3 * 7 + 5 + 5 + 9) * 2 + 4 + 7 + 8) + 3 + 2 + (3 * 3)",
"6 * 7 * 4 * (9 + 6 * (7 * 6 * 8 + 5 + 9 + 2) + 7)",
"9 + (2 * 7 * 6 * 7 + (3 * 8 + 9) + 4) + 4",
"6 + (4 + 6)",
"(8 * 7) + 7 + 5",
"((3 + 6 + 3 + 7 * 5 * 3) + 3) + (8 + 2 * 6 * 8 + 6) + 2 * 7 * 5 * 4",
"(5 + (5 * 2 + 6)) + 8 * 3",
"2 + 8 + (8 + 2 * 9 * 9 + 5)",
"4 * (7 * 8 + 9 * 2 + 6) * 4 + (5 * (9 + 4 * 5 + 4) * 6) * 7",
"9 + 5 + (6 * (8 + 7 + 5 + 6 * 8) * 9 + (9 + 5 + 9 * 6 * 3) + (7 + 2 * 7 * 3))",
"(5 + 3 + 5 + 8) * ((7 + 7 * 4 + 9) * 5) * 3 + 5 * 2 * 5",
"4 * (3 + 3 + 8) * 6 + (2 * 5 + 9) + 3 + 9",
"6 + ((5 * 9 + 7 + 7) + 8 * 2 * 6 + 3) + 7 + (9 + 5 + (4 * 4 + 3 * 4 + 4) + 3 * (7 * 6 + 7) * 8) * 8 + 8",
"3 + 2 + 4 + ((9 * 7 * 6) + 8 * 8 * 2 * 9) * 9 + 4",
"3 + ((7 * 2 + 3 * 2) + 7 + (3 + 9 + 8 + 9 * 4) * 5 * 6)",
"9 + 4 * (8 + 2) * 6 + 2",
"3 + 9 * 9 * 4 * 3",
"(7 + 5 + (6 * 2 + 3 + 8 + 2 * 2) + (9 * 9 * 7) + 8 * 7) * 9 + 7 * 2",
"5 + 7 * (2 * 6 + 8 * 7 * (3 + 3 + 3 + 9)) + (4 + 3)",
"(8 * (6 + 3 * 6 * 3 * 2) + (4 * 7 * 5) * 5 * (6 + 3 * 5 * 4 + 8) + 9) + 9",
"5 * (6 * (7 + 2 + 3 + 9 * 6 * 2) * (3 * 9 * 4 + 4)) * 9 + 4 * 2",
"(3 * 5 + (6 + 3 * 7) * 9 + 5 + 7) + 2 + 4",
"(8 * 6 + 8 + 9 * 3 * 3) + 9 + 2",
"(7 * 2) * (6 * (3 + 2 * 8 * 4 + 7)) * 7 * 2",
"6 * ((5 + 8 * 7 * 8 * 6 * 8) * 2 * 4 * 6 * 5)",
"(7 + 6 * 3 + 9 + (6 + 6 + 3 * 7 * 5 * 3) + 8) * 3 + 4 * 9 * 4",
"2 + (7 + 5 + (3 * 5 * 9 + 2) + 8 * 5 + 5) * ((3 + 3 + 4 + 6) * 6 * 7) * (7 + (8 + 2 * 5) * 5 + 2 + 8) * 8",
"(2 + 5 + 4 + 8) * 6 + 9 * 3 * 5 * 4",
"(6 * 9 + 3 * 9 + 3) * 3 * (6 + 7 * 6 * 2 * 6) * 4 + 4 + 3",
"6 * 9 + 2 * (7 + 5) + (8 * 8 + 6)",
"7 + 7 + 7 + 7 * 8",
"(8 + 3) * 3 + ((9 * 2) * 4 * 8 + 4 * (9 * 2 * 4 * 5) * 7) * 5 * 2 * 9",
"8 * 7 * (5 + 4 + 5 + 2 + 6 + (5 * 6 + 2)) + 3 * 8 * 3",
"2 * 2 + 5 * (3 * (3 + 9) * 7) + 5",
"5 * 5 * 9 + (8 + (2 * 5) + 6 + 6)",
"(7 + 4) * 5 + 6 * 4",
"5 * 9 * (2 * 5 * 6)",
"(6 + (5 + 8) + 5 + 4 + 4 * 2) * 3",
"8 + (9 + 3 * 8 * 9)",
"((8 + 3) + 3 + (2 * 4) + 4 + 4) + 2 + 3 * 6 * 8",
"(3 * 2 + 4 * 6 + 7 * 4) * 3",
"8 + 2 * ((3 + 7) * 8 * 2) * 8 * 9",
"4 + 4 * 2 * ((4 + 3 + 4 + 2 + 2) * 2 * 4 * 7) * (9 + 3 + (8 * 5 * 6 + 3 * 3) * 4 + 2 * (9 * 4 * 4 + 3 + 7)) + (2 * 9 * (9 * 2 + 6 * 2) + 8 * 4)",
"2 * (8 * (3 * 7 * 2 + 9 + 5) * 2) * 7",
"((6 * 6 * 6 + 6) * (5 * 6) * 6) * 5 * 6",
"(6 * (2 + 2 * 9 * 3) * 6 + (9 * 8 + 9 + 7 * 4 * 7)) * 9",
"5 + (2 + (8 + 8 + 7 * 3 * 4) * 6 + (8 + 5 + 8 * 8 + 6 * 4) * (7 * 6)) * 2",
"8 + (2 * 4 + 6 + 6 * 4 * 3) + (7 * 8 * (7 * 4 * 8 * 8 * 2 * 2) + 9) * 5",
"((5 * 7 * 3 + 2 + 2) + (4 + 4 + 7) + (6 * 9 + 7 * 6)) + 9 + 5 * 3 + 3 * 6",
"((3 * 5 * 8) * 4) * (9 + 6 + 6 * 7 + 6) + 6 + 9 * (8 * 5 * (4 * 9 * 2 + 5 * 2 + 9) * 3) + 8",
"7 + 2 * 9 * (5 + (9 * 6 * 7 * 7 + 2) * (9 * 3 * 8 + 5 * 6) * 8 * 4) + 2",
"7 * 8 * 3 + 2 * 6 + 5",
"5 * 8 * 9 * ((2 + 6) * 5 * 4 * 2 * (2 + 3 + 9) * 6) * 5 * 6",
"8 * (8 + 8 + 6 + 8 * 8) * ((6 + 9 + 4 * 3 + 8 * 3) * (5 + 7 * 9 * 6 * 5 + 6)) + 5 + 2",
"9 * (7 * 6 * 8 * 4) * 6 + 5 + 6 + 2",
"(3 * 4 + 3 + 2) * (4 * 3 + 9 + 6 * 3) * 9",
"(8 + 4 * 2) * (8 * 6 * (8 * 9 * 6 + 4) * 4) + 4 + ((5 * 4 * 7 + 5) * 8 * 3) + 3",
"4 + 9 + 8 + (5 * 9 * (3 + 4 * 4 + 3))",
"(3 * 3 + 9 + 7 + 5) * (3 + 3) * 8 * 3 * 9",
"7 + 5 + 7 + ((4 + 4 + 3 + 4) + (7 * 8) * 6) * 8",
"((8 + 4) + 8 * 2 + 5) + 2 + (7 + 4) + 4 * (9 * (3 * 6 * 2) + 5)",
"7 + (3 * 2 * 8 * 6 + 9 + 4) * (7 + 6 + (6 + 7) * 5) * 4 + 5 + 4",
"3 * 3 + (7 + 2 * (5 + 3)) + (5 * (7 + 5 + 6 + 7 * 6 + 3)) + 7",
"8 + 9 * 5 * 5 * 5 * (5 + 6 * 4 * 6 * 7)",
"(4 + 5 * 8 * 4 + 4) * 3 * 7",
"7 + 6 + (5 * 6) * 3",
"4 + 6 * 4 * ((9 + 6 + 5) * 6 + 2 * 8 + 5 * (8 * 4 * 8)) * 9",
"3 + ((7 * 4 + 3 + 7) + 9 * 7) + (3 + 9) + (7 + 6 + 7 * 9 * 3) * 9 * 7",
"(4 * (2 * 4 * 4 * 4 * 8 + 3) + 3 * 6 * 3) * 6 * (7 * 8 + 2 * 8 * 2 + 9) + 3 * 6",
"3 * (4 * 4) + 6 * 2",
"6 * 9 + (3 + 9 * (8 * 6) + 8 + (9 + 7 * 2 + 9 + 5 + 4)) + 4 * (7 * (2 + 6))",
"(5 * 2 + 4 + (2 * 5 + 9) + 4) + 8 + (4 + 5 + 8 + 2) * 4 * 2 + 5",
"7 * 5 * 6 * 7 * 9 + ((6 * 4) * 9 * 6 * 4 * 8)",
"9 + 3 + 3 + 5 * 2 * 8",
"7 * (6 * 7 + (4 * 4 * 5 * 6 * 9) + 4 + 2 + (6 + 5 * 9 + 7 * 9 * 8)) + 9 * 2 * 9",
"8 * 7 + (6 * 9 * 6 + 4 + 5 + 5) * 7 * 9 + 2",
"(6 * 7) + 6 + 8 * (4 * 9 + (2 * 9 * 6 + 8))",
"(2 + 9 + 2 + (7 * 6 + 3) * (6 + 5 * 5 + 8 + 3)) * 9 + 9",
"(9 + 9 + 8 + 2 + 2) * 2 + 3 + 8",
"(4 * 4 * 5 * 9 + 2) * 5 + 9 * 5 + 9 * (9 * 5 + 8 * 8)",
"6 + 4 * (9 * (6 + 9 * 5)) * (5 * 7 * 8 + (3 * 4 * 3) + 5) * (2 * 7 * (5 * 2 * 3)) * 6",
"6 * 6 * ((5 + 9 * 4 * 9 * 4) + 5 + 3 + (3 + 6)) * 2",
"(7 + 8 * 5) * 9 * ((7 + 5 + 3 + 7) + 8) * (9 * 3 * 7 + 8 + 9 + 2) + 8 + (6 * (3 * 2))",
"5 + 6",
"(8 + 8 * 5 + 9 + (3 + 2 + 7 + 9) + 4) + 8 * (5 * 7 * 5 + 4 * 9) + 2 + 3",
"8 + 7",
"(4 + 4 + (5 + 2) * 8 * 6 + 7) * 6 * 6 + 9",
"2 * (5 * 2) * (4 * 3 + 2 + 5) + 7 + 7 + 9",
"6 * (3 + 4 * 3 * 4 + 5 * 9) * 9",
"3 * ((5 + 9 * 9) + 3 + 8)",
"7 * 6 * 8 + 6 * 5 + (9 + 2 * 2 * 6 + (8 * 3 * 7 + 6 + 7 * 5))",
"((7 * 6 + 4 + 2 + 8 + 7) + 7 * 2 * 3) + (3 * (7 + 3 * 6) + 5 + 6) * 8 * 9 * 6 + (9 + 5 * 9 + 3)",
"9 + 4 + ((8 + 5) * 9) * (4 + 5 + (7 * 5 + 2 * 3 + 3 * 7))",
"(9 + 4 + 6 + 3) * 5 * (3 * (5 * 7 + 8 + 6 * 9 * 9)) * 3 * 8 * ((4 + 6 + 3 * 3 * 4 + 6) * 5 + 2)",
"(9 + 4 * 7) + 2 + 7",
"2 + (8 + 3 + 2) + 5",
"3 + 5 * (8 + 6 * (6 + 3) * 7 + 7)",
"8 + (3 * 8 * (4 + 7 + 4) + (5 + 8) * 8 * 2) + 6",
"8 * 7 * (9 + 5 * 8 * (5 * 4 * 4 + 8 + 3) + 5)",
"2 * 6 + (7 * (8 * 4 + 3 * 2) + 7 * 2) * 6 + 6 * (8 * 5 + 7 + 6 * 9 * 9)",
"(4 * 9 * (7 * 3 + 9 + 7 * 7)) * 6 + 4",
"(4 + 6 * (6 + 7 + 6 * 5 * 7 * 9) + 5) * 2 + 2 * 5 + 9",
"9 * (4 * 2 * 2 + 6) + 6 + (8 * 6 + 3 * 5 * 7 * 4) * 5",
"5 * ((7 + 5 + 8 * 3) + 5 * 2 + 3)",
"(9 * 3 + 7 * 2) * 2 + 4",
"7 + 5 + (5 + 6 + (4 * 5 + 7 + 5 * 8) * 6 * (3 * 4 * 7 * 5 * 7 + 6) * 9) + (3 + 3) * 4",
"(5 + 3 * 7) * 9 + 4 + 5",
"3 * 3 + (9 * 3 + (6 + 4 + 4 * 6 * 4) * 6) + (2 * 6 + (3 + 7) + 7 * 9 * 6) + 5 + 6",
"2 * (5 + (8 * 7) * (7 + 3) * 7 * 9 + 4) * 6 + 6 * 5 * (3 + 5 * 3 * (2 * 9 * 7 * 6))",
"(3 * (2 + 9 + 8 * 4 + 6)) * 9 + 2 * 6 + (9 * 7)",
"(9 + (9 + 3 * 8) * 2 + 9) * 2 + (8 + 6 * (6 + 2 * 3 + 8 + 7)) * 4",
"5 + ((7 + 8 * 8 * 7 * 6 + 7) * 6 * 6 * 2)",
"(5 * 5 + 7 * 5 + (5 * 5 * 5)) + 9 * (2 * (4 + 3 + 5 + 2 + 3) + (7 + 3 + 6 * 4 * 9 + 7)) + 6 * 7 + (4 * (6 * 8) + (6 + 3 + 6 * 5) + 6 * 9 * (5 + 9 * 4 + 9 + 5))",
"(6 + (3 * 6) * 5) * 8 + 2 * 2",
"3 * 5 + ((5 + 6 * 8 * 2 * 7 * 9) * 2 + 4 * (3 * 5 * 8) * (9 + 6) + 5) * 5",
"8 * 7 + 9",
"(2 + 5 * (5 * 5) + 9 * 8) + 4 * 8 + 6",
"((7 + 6) + 6) * 2",
"9 * 9 + 8 * (3 + 9) + (5 + 7 * (5 * 6 * 9 * 9 * 3 + 2) * 9) + 5",
"6 + (2 * 7 + (4 * 6 * 3 * 6 + 3 * 3) + 9 * 4 + (8 + 7)) + 7 * 9 * (2 + 6 + 8) * ((8 * 5 + 9) * 8)",
"2 * (6 + 7 * 6 + (9 + 4 + 4 + 5 + 9) * 5) * 7 + 4",
"(2 + 6 + (7 * 6 * 7 * 8 * 6 + 6)) + 6 + 3 * 7 + (7 + 8 + 4 + 2)",
"((7 + 9 * 8) * 3) * 2 + 8",
"(6 + 3 * (8 + 4) * 3) * 5 * (5 * (8 * 7 * 7 * 6) * 8 + (8 * 8) + 7) + 9 * 8 + 8",
"4 + 3 * (5 + 7 + 7) + 6 * 7",
"7 + 5",
"5 * 7 * 8",
"((5 + 9 + 7) * 7 + 3 * 9 * 2 * 7) + 3 + 9 + (9 * 2 * (5 + 7) * (6 * 8) + (2 + 6)) + 6 + (2 * 5 + 3 * 2)",
"5 + (7 + 3 * 8 * 7) + 6 + 5 + 8 + ((7 * 4) + 2 + 5 + 5 * (5 + 3 + 3) + 9)",
"3 + (2 * (8 + 5 + 7 + 4) * 4 + 8 * 4 * 3)",
"(9 + 7 + (3 + 3 * 4 * 8 * 3 * 8)) + 9 * 5",
"9 + 4 + (3 * 4 * 7 + 3 + 5) + (9 * (6 * 2 * 2) + (8 + 2 + 8 + 7 + 2) + (7 + 6 + 7 + 9 * 2 * 6) + 9)",
"4 * ((7 * 4 * 9) * 6 * 4 * (7 + 8 * 8) + 7 * 6) + (5 + (8 * 3 * 8 + 9 * 8 * 4) * 9 * 5 * (6 * 4 * 5 * 7 * 4 * 6) + 9) + 2 * 3 + 2",
"2 * (2 * 3 + 4) + 5 * 7 * 7",
"(4 + 3 + 4) + 7 + 9 + 6 + ((7 * 4 * 8 + 9) + 6 + (4 + 3 * 2 * 5) * 2 * (9 + 8 + 8))",
"(5 + 3 + 8 + 9) + 6 * 4 * 3 + (4 + 9) * 7",
"3 * 2 * 3 + (8 + 9 * 5 * 3 + 6 + 7)",
"(5 * 5 * (7 + 3)) + 8 + 7",
"4 + 6 * 7 * ((2 + 2 * 8) * 3 + 2) * 5",
"5 * 2 + (4 + 4 * 6 * 9) + 7 + 7 * 4",
"9 + 9 * 9 * (7 + 6 + 4)",
"8 * 7 * 4 * ((9 + 6 * 3 * 4 * 6) + (5 * 4 + 8 * 3 + 2) + (6 * 6 + 3 + 3 * 4) * 7 + 3) + (2 * (9 * 3 + 7 * 7 + 3 * 6) * 6 + (7 * 5 * 3 + 6 + 5) + 4) + 5",
"6 * 7 * 5 + 4 * (3 + 2 * (7 * 5 * 4) * (3 + 6 + 7 * 4 + 2 + 6)) + 8",
"4 + ((8 * 8 + 5 * 9 + 8 + 6) * 4 * 5 + 2 + 4 * 5) * 3 + 5 + 8 * 6",
"4 * 6 * 4 * 7 * (3 * 3 * 3) + ((6 * 5 * 2 + 2) + 9 + 5 + 2 * 7 + (8 * 3 * 2 * 2 * 5))",
"9 * (7 * 8 * 7 + 8) * (7 * (7 * 2 + 5 + 9 * 2) * 9 * 9)",
"9 + (2 * 2) + 8 * 4 + (7 * 2 * 7 * 4) * 7",
"(6 * (6 + 6)) * ((7 * 8) * 9 + 9) * 4 * 4 + 8 * 3",
"7 + (8 + 9 * 8 * 3 + 3 + 3) + 7 * (9 + 3 + 4) + 4 + 8",
"3 + 8 + 5 * 5 * (2 * 6)",
"7 * 4 + 3 * ((8 * 5 * 6) + 6) * 5 * 4",
"(4 + (6 + 4 * 9 * 3) * 2 * 9 + 4) * 7 + 9 * 3 * 8",
"6 + 8 * ((6 + 7 + 2 + 5 + 8 * 9) + 3 + 9 * 3 * 7 + 6) + (9 * 8 + 2 * 4) + 8",
"9 + 6 * 2 + 3 + 7 + (2 + (8 * 3 + 3 * 7) * 4 + (7 + 4 + 7 + 3 + 4 * 9))",
"3 + (5 * (6 + 7 + 5 * 8)) * 2",
"2 * (2 + (8 * 3 * 9 + 6 * 8) + 8 * 2 * (6 + 4 + 7 * 9))",
"4 + (2 + 9 + 8) + 7 * 3",
"(2 * (7 + 2) + (5 * 5 * 2 * 6 * 4) + 6) + 8 + (7 + 4 * 3 * 3 * (6 + 3 * 9 * 6) + 8) * (4 + 2 * 9 + (2 + 7 + 7) + 7) + 6",
"(5 + 4 + 9) + 8 * 7 * (8 * 4) + (4 + 9 + 6)",
"8 * ((7 + 7 * 2 + 8) + 7 + 7 * (9 + 7) * 2 * (5 + 8 * 9 + 9 + 9)) * 7 * 4 + 9 * 4",
"8 * 5 * 3",
"9 + 2 * (5 + 4 * 6 * 5) + 8 * 5",
"5 * (9 + 3) * 7 + ((4 + 4 * 8) * (4 * 7) * (6 + 5) + 3) * 6 + 5",
"2 + (6 + 8 + 4 + 2 * 6) * (5 + 4)",
"7 * (6 + 5 * 6 * 5) * 5 * 6",
"(4 + 9) + 3 + ((8 + 5 * 2) * 4 + 2 * 4 * 4 * 4)",
"9 * ((4 + 4) * 3 + 9) + 9 + 2 + ((9 * 4 + 3 * 7 + 8) + 6 + (3 + 8)) * (7 * 4 * 2)",
"7 + (7 * 5) * (4 * 2 + 6 + 8 + 4 + 3) * 3",
"6 + 2 + 5 + 5 + ((4 * 4 + 2 + 9) * 2)",
"8 + 2 * 2 + 6 * 8",
"(3 + 5 + 4 * 5 + 6 + 4) * 2 + 5 * (5 + (6 + 7 * 2 + 8) + 5 + 9 * 7 + 3) * 4",
"9 * 3 + 5 + (6 + 3 + 6) * 8",
"((6 + 8 * 3 * 6) + 6 + (3 * 4 + 5) * 3) * ((3 * 5 * 8 * 5) + (7 + 3 + 5) + 2 * 8 * (4 * 5 * 4 + 3 + 2))",
"9 + ((6 + 3 * 3) + (3 * 2 + 4 + 4) * 8 + 2 + 4) * (4 * 8 * (6 + 2 * 9 + 4 * 9) + 9 * 9 * 6) * 2",
"((7 * 6 * 8 + 5 * 7 + 2) * 4 * 5 * (8 * 6) * 5 * 7) * 9 * ((6 * 9 + 5 + 2 * 6) + 4 * 7) + 5 * 4 * 9",
"5 * 3 + 8 + 3 * 6",
"4 + (7 * 2 + 3) + (7 + 4 + 8 * 4 * 2 * 5) * 5 * 9",
"9 * ((9 * 7 * 6 + 5 + 4) + 6 + 9 + 3 * 7) + 9 + 4 + 7 * 4",
"5 + (8 * 6 * 8 + 7 * 8 + (5 + 4 * 4)) + 8",
"(7 + 4 + 5 * (7 + 6 + 3 + 7) + (9 * 5 * 8)) * 6 + 5 + 2 * 5",
"(4 * 8 + 2 * 4) + 9 * ((7 + 7) * 2 + (5 + 8 + 6) + 2 + 9 + 8) + 3 * 7 * 4",
"3 + 5 + 6 * (5 * (4 + 5 + 9 + 4 * 9 + 9) + 6)",
"9 * (8 * 6 + 7 + 9 + 7) + 5 + 2 + (6 + (9 * 8 + 4 + 3 * 5 + 4) * (7 * 9 * 2 + 7 + 3 * 6) * 2 * 7 + 8)",
"7 * 4 * 2 * 5",
"6 * 8 + 7 + (4 * 2 + 4 + (5 + 7 * 3))",
"5 * 4 + (7 * (4 * 4) * 2) + 5",
"3 + 2 * 7 * 3 * (7 + 3 * 3) * 3",
"9 * 7 * 9 + 7 + ((7 + 5 * 4 + 8 + 9 + 2) * 9 + 6 + 2 * 9 * 7) * 2",
"8 + 3 * 5 * 4 * (2 + 7 + 4 * 4 + (6 + 3 * 2 + 4) * 2)",
"3 + 5 + 3 + 2 + 2 + 3",
"8 + (7 * (3 * 8 + 7 * 8) * 9) * (9 * 8 + 9 + 6 + 4)",
"5 * ((8 + 6 + 6 * 9 * 4) + 5 + 4 * 8 * 5) + (3 * 4 * 4 + (6 + 6 * 7)) + 2 + 2",
"(4 + 8) * 5 + 7 * 4 + 9 + 8",
"2 + 9 + (8 * 7 * 8 * 9 * (5 + 9 + 8)) + 7 * 9 * 4",
"8 * 2 + (3 + 7 + 4 * 6 + 8 + 3) * 5 * (3 * 4 + (3 + 6 + 4 * 7 * 3) * 2)",
"6 + (8 * 5 + 7) * 3 + 6 * 9 + (5 * 8 + 5 * 9)",
"(5 * (8 + 8 * 8 * 8 * 6 * 6) + 3 + 3 * 6 * 4) * 7 + 8 * 4 * (3 * 8 * 9 + 3 + 5 * 4)",
"4 * ((2 + 5) * 6 + 3 * 9 * 9 + (4 * 4 + 6 * 2))",
"4 * 8 * 2 * ((9 + 4 * 6 * 3 + 3) * (4 + 7 * 5 + 6 * 3) * 7 * 3 + (9 + 5)) + 5 * (3 + 3 * 9)",
"4 + 4 + (4 * (2 + 4 * 8 * 5) * 4 * (9 * 5 + 8 + 3)) * 4 * 9 + 5",
"2 + 6 + 4 + (3 + 4 + 8 + 3 + (9 + 3 + 8 + 7))",
"(9 * 5 + 5 * 9 * 9) + 9 * 7 * 5 + 7",
"8 * 3 + 8 + 8 + (5 + 7 + 3 + 6 + 6 + 3) * 3",
"(8 + (2 + 8 + 7 * 5 * 5)) * 5 * 4 + 9 * 6",
"(8 * 6 * 9 + 4) * 4",
"6 + 8 * 6 + 8",
"2 * (8 + 8 * 3 * 7) + (4 + 5) + 3",
"4 * 7 + (2 * (7 + 4 * 6) + 2 * 3 + 4 + (9 + 6 + 9 * 4)) * 6 * (3 * 9 * 8 * (4 + 2 * 8))",
"7 * 5 * 4 + 6 + 4 + (4 * 7 + (8 * 3 * 7 + 7 * 5 * 9) * 5 + (3 * 7) + 2)",
"4 + 6 * 5 + (3 * 9 + 3 + (8 * 3 * 8 + 2) + 5)",
"(5 * 5 + (9 * 8 + 9 + 4 * 4 + 4) + 5 * 9 * 3) + 8 + 3 * 6",
"8 + 4 + 7 * (2 * 8 + (4 * 2 + 6) * (4 + 6 + 5 * 9 * 8 * 8) + 9 + (9 * 8)) * 3",
"8 * 9 * 8 * (8 * 4 + 9 * 5 + 3)",
"9 * 9 + 5 + ((7 * 2 + 7 * 6) + 7 * 4 * 2 + 7)",
"(7 + (7 + 8 * 8) * 8) * 2 + 6 + 5 + 3",
"8 + 4 * 8 * 9 + (7 * 6 * 3 * 7 * 5)",
"(5 + 7 * (4 + 8 + 9 * 8 * 8 * 3) * 3) + (5 + (6 + 9 * 5) * 3 * 3 + 4 + (8 * 7 + 6 * 9 + 4))",
"(9 * (7 + 2) * 5) + 3 * 7 + 4 * 6 + 2",
"5 * ((7 * 3 + 8) * 9 * 8 + 8 + (9 + 7 + 5 + 8))",
"(3 * 6) * 2 * 5 * 4 + (5 * 7 * 3 * 2 + 4 * (7 * 8 * 8 + 5 + 3)) + 4");

	@Test
	public void test() {

		assertEquals(null, findParentheses("1 + 2"));
		assertEquals("(3)", findParentheses("1 + 2 + (3)").value);
		assertEquals(null, findParentheses("1 + 2"));
		assertEquals("(3)", findParentheses("1 + 2 + (3) + 3 + 2").value);
		assertEquals("(1 + 2 + 3)", findParentheses("(1 + 2 + 3) + 3 + 2").value);
		assertEquals("(1 + (2 + 3) + 5)", findParentheses("(1 + (2 + 3) + 5) + 3 + 2").value);
		assertNotEquals("(2 + 3)", findParentheses("(1 + (2 + 3) + 5) + 3 + 2").value);
		assertEquals(26, getResult("2 * 3 + (4 * 5)"));
		assertEquals(437, getResult("5 + (8 * 3 + 9 + 3 * 4 * 3)"));
		assertEquals(12240, getResult("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))"));
		assertEquals(13632, getResult("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"));
		assertEquals(8034493584L, getResult("5 + (2 * (6 + 4 + 5 * 3 * 3) + (9 + 7 * 4) * (5 + 6 * 5 + 9 + 6)) + (2 * (2 * 3 * 3 + 4) + 9 * 8 + 9) + 4 * 6 * (9 + 9 + 5 * (7 + 8 * 9 * 9 + 7) * 2)"));
		assertEquals(8034493584L, getResult("5 + (270 + 64 * 70) + (2 * 22 + 9 * 8 + 9) + 4 * 6 * (23 * 1222 * 2)"));
		assertEquals(8034493584L, getResult("5 + 23380 + 433 + 4 * 6 * 56212"));
		assertEquals(8034493584L, getResult("8034493580 + 4"));
		assertEquals(3824, getResult("(9 + 4 * 9 * 4) + 3 + 7 * 8"));
		assertEquals(13712, getResult("4 * 4 * (8 + 4 * 2 * 3 + (6 + 6 * 7 + 6) + (7 + 4 * 9 * 7 + 2))"));
				
		// Part one
		assertEquals(67800526776934L, getResultsSum(input));
		
		// Part two
		assertEquals(5, findAddition("2 + 3 * 5").value);
		assertEquals(0, findAddition("2 + 3 * 5").startIndex);
		assertEquals(4, findAddition("2 + 3 * 5").endIndex);
		assertEquals(0, findAddition("2 + 32 * 5").startIndex);
		assertEquals(5, findAddition("2 + 32 * 5").endIndex);
		assertEquals(0, findAddition("2 + 32 * 543").startIndex);
		assertEquals(5, findAddition("2 + 32 * 512").endIndex);
		assertEquals(231, getResult2("1 + 2 * 3 + 4 * 5 + 6"));
		assertEquals(51, getResult2("1 + (2 * 3) + (4 * (5 + 6))"));
		assertEquals(46, getResult2("2 * 3 + (4 * 5)"));
		assertEquals(1445, getResult2("5 + (8 * 3 + 9 + 3 * 4 * 3)"));
		assertEquals(669060, getResult2("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))"));
		assertEquals(23340, getResult2("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"));
		

		assertEquals(340789638435483L, getResultsSum2(input));
		
	}

	private long getResultsSum(List<String> list) {
		long sum = 0;
		for (String string : list) {
			sum += getResult(string);
		}
		return sum;
	}
	
	private long getResultsSum2(List<String> list) {
		long sum = 0;
		for (String string : list) {
			sum += getResult2(string);
		}
		return sum;
	}

	private long getResult(String expr) {
		Parenthesis parenthesis = findParentheses(expr);
		if (parenthesis != null) {
			String newExpr = expr.substring(0, parenthesis.startIndex) + 
					getResult(parenthesis.value.substring(1, parenthesis.value.length()-1)) + 
					expr.substring(parenthesis.endIndex); // Occhio
			return getResult(newExpr);
		}
		String[] split = expr.split(" ");
		
		Operation total = null;
		for (String string : split) {
			if (total == null) {
				total = new Operation(Long.valueOf(string));
			} else if ("+".equals(string)) {
				total.operator = "+";
			} else if ("*".equals(string)) {
				total.operator = "*";
			} else {
				total.setRight(Long.valueOf(string));
			}
		}
		
		return total.left;
	}
	
	private long getResult2(String expr) {
		Parenthesis parenthesis = findParentheses(expr);
		if (parenthesis != null) {
			String newExpr = expr.substring(0, parenthesis.startIndex) + 
					getResult2(parenthesis.value.substring(1, parenthesis.value.length()-1)) + 
					expr.substring(parenthesis.endIndex);
			return getResult2(newExpr);
		}
		Addition addition = findAddition(expr);
		if (addition != null) {
			String newExpr = expr.substring(0, addition.startIndex) + 
					addition.value + 
					expr.substring(addition.endIndex+1);
			return getResult2(newExpr);
		}
		
		String[] split = expr.split(" ");
		
		Operation total = null;
		for (String string : split) {
			if (total == null) {
				total = new Operation(Long.valueOf(string));
			} else if ("*".equals(string)) {
				total.operator = "*";
			} else {
				total.setRight(Long.valueOf(string));
			}
		}
		
		return total.left;
	}

	private Parenthesis findParentheses(String expr) {
		// TODO
		String[] array = {""}; // Utils.tail(expr.split(""));
		int index = 0;
		boolean found = false;
		while(index < array.length && !found) {
			if ("(".equals(array[index])) {
				found = true;
			} else {
				index++;
			}
		}
		if (!found) {
			return null;
		}
		int nParentheses = 1;
		for (int i = index+1; i < array.length; i++) {
			if (")".equals(array[i])) {
				nParentheses--;
			} else if ("(".equals(array[i])) {
				nParentheses++;
			}
			if (nParentheses == 0) {
				return new Parenthesis(expr.substring(index, i+1), index, i+1);
			}	
		}
		return null;		
	}
	
	private Addition findAddition(String expr) {
		String[] array = expr.split(" ");
		int index = 0;
		boolean found = false;
		while(index < array.length && !found) {
			if ("+".equals(array[index])) {
				found = true;
			} else {
				index++;
			}
		}
		if (!found) {
			return null;
		}
		long mul = Long.valueOf(array[index-1]) + Long.valueOf(array[index+1]);
		int startIndex = 0;
		for (int i = 0; i < index-1; i++) {
			startIndex += array[i].length() + 1;
		}
		return new Addition(mul, startIndex, startIndex + array[index -1].length()+2+array[index+1].length());
	}
	
	class Parenthesis {
		String value;
		int startIndex;
		int endIndex;
		Parenthesis(String value, int startIndex, int endIndex) {
			this.value = value;
			this.startIndex = startIndex;
			this.endIndex = endIndex;
		}
		@Override
		public String toString() {
			return value;
		}		
	}
	
	class Addition {
		long value;
		int startIndex;
		int endIndex;
		Addition(Long value, int startIndex, int endIndex) {
			this.value = value;
			this.startIndex = startIndex;
			this.endIndex = endIndex;
		}
		@Override
		public String toString() {
			return value + "";
		}		
	}

	class Operation {
		long left;
		String operator;
		Operation(Long valueOf) {
			this.left = valueOf;		
		}
		void setRight(Long right) {
			if ("+".equals(operator)) {
				left += right;
			} else {
				left *= right;
			}
		}
		@Override
		public String toString() {
			return left + "";
		}
		
	}
}
